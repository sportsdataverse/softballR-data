pbp_id <- sub('.*/(\\d+).*', '\\1', box_raw[grep("Play by Play", box_raw)[1]])
possible_events <- c("struck out swinging",
"struck out looking",
"grounded out",
"flied out",
"infield fly",
"hit into double play",
"lined out",
"out",
"reached on a fielder's choice",
"reached on an error",
"reached on a throwing error",
"reached on a fielding error",
"lined into double play",
"grounded into double play",
"hit by pitch",
"walked",
"intentionally walked",
"fouled out",
"fouled into double play",
"popped up",
"singled",
"doubled",
"tripled",
"homered")
raw <- glue::glue("https://stats.ncaa.org/game/play_by_play/{pbp_id}") %>%
rvest::read_html() %>%
rvest::html_table()
if(length(raw) == 0){missed <<- c(missed, i); return(NULL)}
upd <- raw[(5:length(raw))][c(F,T)]
df <- do.call(rbind, upd)
names(df) <- df[1,]
team_name <- df[1,1] %>% as.character()
team_col <- 1
opponent_name <- df[1,3] %>% as.character()
opponent_col <- 3
filtered <- df %>%
dplyr::rename(team = team_col, opponent = opponent_col) %>%
tidyr::separate(Score, c("away_team_runs", "home_team_runs"), sep = "-") %>%
dplyr::select(team, away_team_runs, opponent, home_team_runs) %>%
dplyr::mutate(new_inning = team == team_name,
inning = cumsum(new_inning)) %>%
dplyr::filter(stringr::str_detect(team, paste(possible_events, collapse = "|")) |
stringr::str_detect(opponent, paste(possible_events, collapse = "|")) |
stringr::str_detect(team, "\\(|R:") |
stringr::str_detect(opponent, "\\(|R:")) %>%
dplyr::select(-new_inning)
away_team <- ifelse(filtered$team[1] != "", team_col, opponent_col)
top_bottom <- as.character(ifelse(!filtered[away_team] == "", "bottom", "top"))
filtered <- filtered  %>%
dplyr::mutate(top_bottom = top_bottom,
events = ifelse(team == "", opponent, team),
team = ifelse(team == "", opponent_name, team_name),
opponent = ifelse(opponent == "", opponent_name, team_name)) %>%
dplyr::filter(!stringr::str_detect(events, "H: "))
# Play ID Format: game_id, inning, top/bottom (top = 0, bottom = 1), play #
pbp <- filtered %>%
dplyr::mutate(top_bottom = top_bottom,
game_id = game_id) %>%
dplyr::group_by(inning, top_bottom) %>%
dplyr::mutate(play_id = paste0(game_id, "_", inning, "_", as.numeric(top_bottom == "bottom"), "_", dplyr::row_number())) %>%
dplyr::ungroup() %>%
dplyr::filter(away_team_runs != "Score")
if(i %% 100 == 0){toc(); tic(i + 100)}
return(pbp)
}
game_ids <- load_ncaa_softball_scoreboard(2023) %>%
pull(game_id)
i <- 0
missed <- c()
tic(100)
pbp <- do.call(rbind, lapply(X = game_ids, FUN = ncaa_softball_pbp))
pbp2 <- do.call(rbind, lapply(X = game_ids[6151:8088], FUN = ncaa_softball_pbp))
toc()
View(pbp2)
length(unique(pbp2$game_id))
min(pbp2$game_id)
min(pbp2$game_id %>% as.numeric)
game_ids[6151]
game_ids[6152]
game_ids[6153]
i <- 0
missed <- c()
tic(100)
pbp <- do.call(rbind, lapply(X = game_ids[1:6150], FUN = ncaa_softball_pbp))
pbp_final <- rbind(pbp, pbp_2)
pbp_final <- rbind(pbp, pbp2)
View(pbp)
write_csv(pbp_final, "~/CSE/d1_pbp_2023.csv")
pbp_d1 <- read_csv("~/CSE/d1_pbp_2023.csv")
pbp_d1 <- read_csv("~/CSE/d1_pbp_2023.csv")
pbp_d2 <- read_csv("~/CSE/d2_pbp_2023.csv")
pbp_d3 <- read_csv("~/CSE/d3_pbp_2023.csv")
length(unique(pbp_d1$game_id))
length(unique(pbp_d2$game_id))
saveRDS(pbp_d1, "~/Projects/softballR-data/data/d1_ncaa_pbp_2023.RDS")
saveRDS(pbp_d2, "~/Projects/softballR-data/data/d2_ncaa_pbp_2023.RDS")
saveRDS(pbp_d3, "~/Projects/softballR-data/data/d3_ncaa_pbp_2023.RDS")
library(tidyverse)
library(janitor)
library(rvest)
library(anytime)
library(glue)
options(warn = -1)
get_pitching_box <- function(id){
raw <- glue::glue("https://stats.ncaa.org/contests/{id}/box_score") %>%
readLines()
pitching_id <- raw[grep("\t   <a href=\"/game/box_score/", raw)] %>%
stringr::str_remove_all("\t   <a href=\"/game/box_score/|\">Box Score </a>")
raw <- glue::glue("https://stats.ncaa.org/game/box_score/{pitching_id}?year_stat_category_id=15021") %>%
rvest::read_html() %>%
rvest::html_table()
first_team <- as.character(raw[[6]][1,1])
second_team <- as.character(raw[[7]][1,1])
upd <- rbind(raw[[6]],raw[[7]]) %>%
`names<-`(raw[[6]][2,]) %>%
janitor::clean_names() %>%
dplyr::filter(!(player %in% c(first_team, second_team,"Player","Totals")))
upd$team <- ifelse(upd$player %in% raw[[6]]$X1, first_team, second_team)
upd$opponent <- ifelse(upd$team == first_team, second_team, first_team)
upd[upd == ""] <- "0"
upd[] <- lapply(upd, gsub, pattern="/", replacement="")
upd <- upd %>%
dplyr::mutate(across(3:26, as.numeric)) %>%
dplyr::filter(ip > 0) %>%
dplyr::mutate(game_id = id)
return(upd)
}
get_hitting_box <- function(id){
raw <- glue::glue("https://stats.ncaa.org/contests/{id}/box_score") %>%
rvest::read_html() %>%
rvest::html_table()
first_team <- as.character(raw[[6]][1,1])
second_team <- as.character(raw[[7]][1,1])
upd <- rbind(raw[[6]],raw[[7]]) %>%
`names<-`(raw[[6]][2,]) %>%
janitor::clean_names() %>%
dplyr::filter(!(player %in% c(first_team, second_team,"Player","Totals")))
upd$team <- ifelse(upd$player %in% raw[[6]]$X1, first_team, second_team)
upd$opponent <- ifelse(upd$team == first_team, second_team, first_team)
upd[upd == ""] <- "0"
upd <- upd %>%
dplyr::mutate(across(3:26, as.numeric)) %>%
dplyr::mutate(game_id = id)
return(upd)
}
get_fielding_box <- function(id){
raw <- glue::glue("https://stats.ncaa.org/contests/{id}/box_score") %>%
readLines()
fielding_id <- raw[grep("\t   <a href=\"/game/box_score/", raw)] %>%
stringr::str_remove_all("\t   <a href=\"/game/box_score/|\">Box Score </a>")
raw <- glue::glue("https://stats.ncaa.org/game/box_score/{fielding_id}?year_stat_category_id=15022") %>%
rvest::read_html() %>%
rvest::html_table()
first_team <- as.character(raw[[6]][1,1])
second_team <- as.character(raw[[7]][1,1])
upd <- rbind(raw[[6]],raw[[7]]) %>%
`names<-`(raw[[6]][2,]) %>%
dplyr::filter(!(Player %in% c(first_team, second_team,"Player","Totals")))
upd$team <- ifelse(upd$Player %in% raw[[6]]$X1, first_team, second_team)
upd[upd == ""] <- "0"
upd[] <- lapply(upd, gsub, pattern="/", replacement="")
upd <- upd %>%
dplyr::mutate(across(3:12, as.numeric)) %>%
dplyr::mutate(game_id = id)
return(upd)
}
curr_hitting_box_d1 <- readRDS("data/D1_hitting_box_scores_2023.RDS")
setwd("~/Projects/softballR-data")
curr_hitting_box_d1 <- readRDS("data/D1_hitting_box_scores_2023.RDS")
curr_pitching_box_d1 <- readRDS("data/D1_pitching_box_scores_2023.RDS")
curr_fielding_box_d1 <- readRDS("data/D1_fielding_box_scores_2023.RDS")
curr_hitting_box_d2 <- readRDS("data/D2_hitting_box_scores_2023.RDS")
curr_pitching_box_d2 <- readRDS("data/D2_pitching_box_scores_2023.RDS")
curr_hitting_box_d3 <- readRDS("data/D3_hitting_box_scores_2023.RDS")
curr_pitching_box_d3 <- readRDS("data/D3_pitching_box_scores_2023.RDS")
url_d1 <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/ncaa_scoreboard_2023.RDS?raw=true")
url_d2 <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/ncaa_scoreboard_D2_2023.RDS?raw=true")
url_d3 <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/ncaa_scoreboard_D3_2023.RDS?raw=true")
con <- url(url_d1)
on.exit(close(con))
scoreboard_d1 <- try(readRDS(con), silent = TRUE) %>%
distinct(game_id, game_date)
con <- url(url_d2)
on.exit(close(con))
scoreboard_d2 <- try(readRDS(con), silent = TRUE) %>%
distinct(game_id, game_date)
con <- url(url_d3)
on.exit(close(con))
scoreboard_d3 <- try(readRDS(con), silent = TRUE) %>%
distinct(game_id, game_date)
most_recent <- min(c(max(anydate(curr_hitting_box_d1$game_date)),
max(anydate(curr_pitching_box_d1$game_date))))
most_recent_d1 <- min(c(max(anydate(curr_hitting_box_d1$game_date)),
max(anydate(curr_pitching_box_d1$game_date))))
most_recent_d2 <- min(c(max(anydate(curr_hitting_box_d2$game_date)),
max(anydate(curr_pitching_box_d2$game_date))))
most_recent_d3 <- min(c(max(anydate(curr_hitting_box_d3$game_date)),
max(anydate(curr_pitching_box_d3$game_date))))
game_ids_d1 <- scoreboard_d1 %>% filter(anydate(game_date) > most_recent_d1) %>%  pull(game_id) %>% sort
game_ids_d2 <- scoreboard_d2 %>% filter(anydate(game_date) > most_recent_d2) %>%  pull(game_id) %>% sort
game_ids_d3 <- scoreboard_d3 %>% filter(anydate(game_date) > most_recent_d3) %>%  pull(game_id) %>% sort
get_ncaa_hitter_player_box <- function(game_id){
i <<- i + 1
hitting <- try(get_hitting_box(game_id))
return(hitting)
}
get_ncaa_pitcher_player_box <- function(game_id){
i <<- i + 1
pitching <- try(get_pitching_box(game_id))
return(pitching)
}
get_ncaa_fielding_player_box <- function(game_id){
i <<- i + 1
fielding <- try(get_fielding_box(game_id))
return(fielding)
}
i <- 0
box <- do.call(rbind, lapply(X = game_ids_d1, FUN = get_ncaa_fielding_player_box))
box <- box %>%
filter(!str_detect(Player,"Error : Document is empty|subscript out of bounds|Timeout was reached")) %>%
merge(scoreboard_d1, by = "game_id")
fielding_box <- rbind(curr_fielding_box_d1, box) %>%
distinct()
saveRDS(object = fielding_box, file = "data/d1_fielding_box_scores_2023.RDS")
i <- 0
box <- do.call(rbind, lapply(X = game_ids_d1, FUN = get_ncaa_hitter_player_box))
View(box)
library(glue)
function (which = "plot", lty = "solid", ...)
{
which <- pmatch(which[1L], c("plot", "figure", "inner",
"outer"))
.External.graphics(C_box, which = which, lty = lty, ...)
invisible()
}
library(glue)
library(stringr)
library(rvest)
library(dplyr)
library(tidyr)
library(magrittr)
ncaa_softball_pbp <- function(game_id){
options(warn = -1)
box_raw <- glue::glue("https://stats.ncaa.org/contests/{game_id}/box_score") %>%
readLines()
pbp_id <- sub('.*/(\\d+).*', '\\1', box_raw[grep("Play by Play", box_raw)[1]])
possible_events <- c("struck out swinging",
"struck out looking",
"grounded out",
"flied out",
"infield fly",
"hit into double play",
"lined out",
"out",
"reached on a fielder's choice",
"reached on an error",
"reached on a throwing error",
"reached on a fielding error",
"lined into double play",
"grounded into double play",
"hit by pitch",
"walked",
"intentionally walked",
"fouled out",
"fouled into double play",
"popped up",
"singled",
"doubled",
"tripled",
"homered")
raw <- glue::glue("https://stats.ncaa.org/game/play_by_play/{pbp_id}") %>%
rvest::read_html() %>%
rvest::html_table()
upd <- raw[(5:length(raw))][c(F,T)]
df <- do.call(rbind, upd)
names(df) <- df[1,]
team_name <- df[1,1] %>% as.character()
team_col <- 1
opponent_name <- df[1,3] %>% as.character()
opponent_col <- 3
if(is.null(df)) return(NULL)
filtered <- df %>%
dplyr::rename(team = team_col, opponent = opponent_col) %>%
tidyr::separate(Score, c("away_team_runs", "home_team_runs"), sep = "-") %>%
dplyr::select(team, away_team_runs, opponent, home_team_runs) %>%
dplyr::mutate(new_inning = team == team_name,
inning = cumsum(new_inning)) %>%
dplyr::filter(stringr::str_detect(team, paste(possible_events, collapse = "|")) |
stringr::str_detect(opponent, paste(possible_events, collapse = "|")) |
stringr::str_detect(team, "\\(|R:") |
stringr::str_detect(opponent, "\\(|R:")) %>%
dplyr::select(-new_inning)
away_team <- ifelse(filtered$team[1] != "", team_col, opponent_col)
top_bottom <- as.character(ifelse(!filtered[away_team] == "", "bottom", "top"))
filtered <- filtered  %>%
dplyr::mutate(top_bottom = top_bottom,
events = ifelse(team == "", opponent, team),
team = ifelse(team == "", opponent_name, team_name),
opponent = ifelse(opponent == "", opponent_name, team_name)) %>%
dplyr::filter(!stringr::str_detect(events, "H: "))
# Play ID Format: game_id, inning, top/bottom (top = 0, bottom = 1), play #
pbp <- filtered %>%
dplyr::mutate(top_bottom = top_bottom,
game_id = game_id) %>%
dplyr::group_by(inning, top_bottom) %>%
dplyr::mutate(play_id = paste0(game_id, "_", inning, "_", as.numeric(top_bottom == "bottom"), "_", dplyr::row_number())) %>%
dplyr::ungroup() %>%
dplyr::filter(away_team_runs != "Score")
return(pbp)
}
load_ncaa_softball_scoreboard <- function(season, division = "D1"){
if(!is.numeric(season)) return("Invalid Input")
if(!(division %in% c("D1", "D2", "D3"))) stop("Invalid Division")
if(min(season) < 2016 | max(season) > 2023) stop("Invalid Season")
if(length(season) == 1){
if(division == "D1"){
url <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/ncaa_scoreboard_{season}.RDS?raw=true")
} else{
url <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/ncaa_scoreboard_{division}_{season}.RDS?raw=true")
}
con <- url(url)
on.exit(close(con))
scoreboard <- try(readRDS(con), silent = TRUE)
} else{
scoreboard <- data.frame()
for(i in 1:length(season)){
if(division == "D1"){
url <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/ncaa_scoreboard_{season[i]}.RDS?raw=true")
} else{
url <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/ncaa_scoreboard_{division}_{season[i]}.RDS?raw=true")
}
con <- url(url)
on.exit(close(con))
scoreboard <- rbind(scoreboard, try(readRDS(con), silent = TRUE))
}
}
return(scoreboard)
}
load_ncaa_softball_pbp <- function(season, division = "D1"){
if(!is.numeric(season)) stop("Invalid Input")
if(season != 2023) stop("Invalid Season")
if(!(division %in% c("D1", "D2", "D3"))) stop("Invalid division")
division_id <- stringr::str_replace(division, "D", "d")
url <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/{division_id}_ncaa_pbp_{season}.RDS?raw=true")
con <- url(url)
on.exit(close(con))
scoreboard <- try(readRDS(con), silent = TRUE)
return(scoreboard)
}
d1_scoreboard <- load_ncaa_softball_scoreboard(2023, division = "D1") %>% mutate(game_date = stringr::word(game_date, 1, 3, sep = "/| |<"))
d2_scoreboard <- load_ncaa_softball_scoreboard(2023, division = "D2") %>% mutate(game_date = stringr::word(game_date, 1, 3, sep = "/| |<"))
d3_scoreboard <- load_ncaa_softball_scoreboard(2023, division = "D3") %>% mutate(game_date = stringr::word(game_date, 1, 3, sep = "/| |<"))
d1_pbp <- load_ncaa_softball_pbp(2023, division = "D1")
d2_pbp <- load_ncaa_softball_pbp(2023, division = "D2")
d3_pbp <- load_ncaa_softball_pbp(2023, division = "D3")
most_recent_d1 <- max(c(d1_pbp$game_date, d2_pbp$game_date, d3_pbp$game_date))
most_recent <- max(c(d1_pbp$game_date, d2_pbp$game_date, d3_pbp$game_date))
d1_games <- d1_scoreboard %>%
filter(game_date > most_recent)
d2_games <- d2_scoreboard %>%
filter(game_date > most_recent)
d3_games <- d3_scoreboard %>%
filter(game_date > most_recent)
if(nrow(d1_games > 0)){
for(i in 1:nrow(d1_games)){
d1_pbp <- rbind(d1_pbp, ncaa_softball_pbp(d1_games$game_id[i]) %>%
mutate(game_date = d1_games$game_date[i]))
}
}
game_id <- d1_games[i]
game_id <- d1_games$game_id[i]
options(warn = -1)
box_raw <- glue::glue("https://stats.ncaa.org/contests/{game_id}/box_score") %>%
readLines()
pbp_id <- sub('.*/(\\d+).*', '\\1', box_raw[grep("Play by Play", box_raw)[1]])
possible_events <- c("struck out swinging",
"struck out looking",
"grounded out",
"flied out",
"infield fly",
"hit into double play",
"lined out",
"out",
"reached on a fielder's choice",
"reached on an error",
"reached on a throwing error",
"reached on a fielding error",
"lined into double play",
"grounded into double play",
"hit by pitch",
"walked",
"intentionally walked",
"fouled out",
"fouled into double play",
"popped up",
"singled",
"doubled",
"tripled",
"homered")
raw <- glue::glue("https://stats.ncaa.org/game/play_by_play/{pbp_id}") %>%
rvest::read_html() %>%
rvest::html_table()
upd <- raw[(5:length(raw))][c(F,T)]
df <- do.call(rbind, upd)
names(df) <- df[1,]
team_name <- df[1,1] %>% as.character()
team_col <- 1
opponent_name <- df[1,3] %>% as.character()
opponent_col <- 3
if(is.null(df)) return(NULL)
length(raw)
ncaa_softball_pbp <- function(game_id){
options(warn = -1)
box_raw <- glue::glue("https://stats.ncaa.org/contests/{game_id}/box_score") %>%
readLines()
pbp_id <- sub('.*/(\\d+).*', '\\1', box_raw[grep("Play by Play", box_raw)[1]])
possible_events <- c("struck out swinging",
"struck out looking",
"grounded out",
"flied out",
"infield fly",
"hit into double play",
"lined out",
"out",
"reached on a fielder's choice",
"reached on an error",
"reached on a throwing error",
"reached on a fielding error",
"lined into double play",
"grounded into double play",
"hit by pitch",
"walked",
"intentionally walked",
"fouled out",
"fouled into double play",
"popped up",
"singled",
"doubled",
"tripled",
"homered")
raw <- glue::glue("https://stats.ncaa.org/game/play_by_play/{pbp_id}") %>%
rvest::read_html() %>%
rvest::html_table()
if(length(raw) == 0) return(NULL)
upd <- raw[(5:length(raw))][c(F,T)]
df <- do.call(rbind, upd)
names(df) <- df[1,]
team_name <- df[1,1] %>% as.character()
team_col <- 1
opponent_name <- df[1,3] %>% as.character()
opponent_col <- 3
filtered <- df %>%
dplyr::rename(team = team_col, opponent = opponent_col) %>%
tidyr::separate(Score, c("away_team_runs", "home_team_runs"), sep = "-") %>%
dplyr::select(team, away_team_runs, opponent, home_team_runs) %>%
dplyr::mutate(new_inning = team == team_name,
inning = cumsum(new_inning)) %>%
dplyr::filter(stringr::str_detect(team, paste(possible_events, collapse = "|")) |
stringr::str_detect(opponent, paste(possible_events, collapse = "|")) |
stringr::str_detect(team, "\\(|R:") |
stringr::str_detect(opponent, "\\(|R:")) %>%
dplyr::select(-new_inning)
away_team <- ifelse(filtered$team[1] != "", team_col, opponent_col)
top_bottom <- as.character(ifelse(!filtered[away_team] == "", "bottom", "top"))
filtered <- filtered  %>%
dplyr::mutate(top_bottom = top_bottom,
events = ifelse(team == "", opponent, team),
team = ifelse(team == "", opponent_name, team_name),
opponent = ifelse(opponent == "", opponent_name, team_name)) %>%
dplyr::filter(!stringr::str_detect(events, "H: "))
# Play ID Format: game_id, inning, top/bottom (top = 0, bottom = 1), play #
pbp <- filtered %>%
dplyr::mutate(top_bottom = top_bottom,
game_id = game_id) %>%
dplyr::group_by(inning, top_bottom) %>%
dplyr::mutate(play_id = paste0(game_id, "_", inning, "_", as.numeric(top_bottom == "bottom"), "_", dplyr::row_number())) %>%
dplyr::ungroup() %>%
dplyr::filter(away_team_runs != "Score")
return(pbp)
}
ncaa_softball_pbp(game_id)
d1_games <- d1_scoreboard %>%
filter(game_date > most_recent)
d2_games <- d2_scoreboard %>%
filter(game_date > most_recent)
d3_games <- d3_scoreboard %>%
filter(game_date > most_recent)
if(nrow(d1_games > 0)){
for(i in 1:nrow(d1_games)){
d1_pbp <- rbind(d1_pbp, ncaa_softball_pbp(d1_games$game_id[i]) %>%
mutate(game_date = d1_games$game_date[i]))
}
}
ncaa_softball_pbp(game_id)
d1_games <- d1_scoreboard %>%
filter(game_date > most_recent)
d2_games <- d2_scoreboard %>%
filter(game_date > most_recent)
d3_games <- d3_scoreboard %>%
filter(game_date > most_recent)
if(nrow(d1_games > 0)){
for(i in 1:nrow(d1_games)){
curr_pbp <- ncaa_softball_pbp(d1_games$game_id[i])
if(!(is.null(curr_pbp))){
d1_pbp <- rbind(d1_pbp, ncaa_softball_pbp(d1_games$game_id[i]) %>%
mutate(game_date = d1_games$game_date[i]))
}
}
}
load_ncaa_softball_scoreboard(2022) -> test
View(test)
